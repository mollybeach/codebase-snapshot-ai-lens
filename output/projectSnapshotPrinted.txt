# Project Snapshot of Token Gating Discord Bot API

This project involves a discord bot that curates access to a discord server based on verified user funds of specific token(s). The discord bot interfaces with a smart contract and accounts for user's relevant token holdings upon registration. This information is then stored onto a db using the serverless api where updated data entries are made based on a moralis connected webhook from respective smart contract.

## Features
- Serverless API
- Next.js Client
- Smart Contract
- WalletConnect
- Thirdweb

## VS Code Remote Development
Visual Studio Code Remote Development allows you to use a container, remote machine, or the Windows Subsystem for Linux (WSL) as a full-featured development environment. You can:

No source code needs to be on your local machine to get these benefits. \* Each extension in the Remote Development extension pack can run commands and other extensions directly inside a container, in WSL, or on a remote machine so that everything feels like it does when you run locally.

### Prerequisites

Please ensure [Visual Studio Code](https://code.visualstudio.com/) is installed on your computer. After installing, you will need to install the [Remote Development Extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack).

### Setup

Please see instructions [here](https://code.visualstudio.com/docs/remote/remote-overview).

This is an automated project snapshot generated for AI assistance.

## Project Context
- Full Path: ../token-gating-discord-bot-api/client
- Type: Partial Project (client directory)
- Generated: 11/14/2024, 11:58:17 AM

## Important Notes
- This snapshot shows only the client directory and its contents
- Files over 2000 lines are truncated
- Binary files and dependencies are excluded

=================================
      PROJECT TECHNOLOGIES
=================================
Located package.json: ../token-gating-discord-bot-api/client/package.json

📦 Main Dependencies
-------------------
• @thirdweb-dev/react  ^3
• @thirdweb-dev/sdk    ^3
• @web3-react/walletconnect-connector ^6.2.13
• discord.js           ^14.7.1
• dotenv               ^16.0.3
• ethers               ^5.7.2
• next                 ^13.0.6
• next-auth            ^4.18.4
• npm-check-updates    ^16.5.3
• react                ^18.2.0
• react-dom            ^18.2.0

🛠️  Dev Dependencies
-------------------
• @types/node          ^18.11.12
• @types/react         ^18.0.26
• eslint               ^8.29.0
• eslint-config-next   ^13.0.6
• typescript           ^4.9.4


=================================
           FILE TREE
=================================
Directory structure for: ../token-gating-discord-bot-api/client

## Project Structure

```
client/
├── components/
│   └── SignIn.tsx
├── node_modules/
├── pages/
│   ├── api/
│   │   ├── auth/
│   │   │   └── [...nextauth].tsx
│   │   ├── grant-role.tsx
│   │   ├── message.tsx
│   │   ├── tokens.tsx
│   │   ├── update-roles.tsx
│   │   └── users.tsx
│   ├── _app.tsx
│   └── index.tsx
├── public/
│   ├── favicon.ico
│   └── thirdweb.svg
├── styles/
│   ├── globals.css
│   └── Home.module.css
├── .babelrc
├── .env
├── .env.example
├── .eslintrc.json
├── .gitignore
├── env.production
├── LICENSE.md
├── next-env.d.ts
├── next.config.js
├── package-lock.json
├── package.json
├── README.md
└── tsconfig.json

```

=================================
         FILE CONTENTS
=================================
File contents for: ../token-gating-discord-bot-api/client
Each file is preceded by its full path.



=== File: ../token-gating-discord-bot-api/client/.babelrc ===
{
    "presets": ["next/babel"],
    "plugins": []
  }


=== File: ../token-gating-discord-bot-api/client/.eslintrc.json ===
{
  "extends": [
    "next"
  ]
}



=== File: ../token-gating-discord-bot-api/client/README.md ===
## Getting Started

Create a project using this example:

```bash
npx thirdweb create --template next-typescript-starter
```

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

On `pages/_app.tsx`, you'll find our `ThirdwebProvider` wrapping your app, this is necessary for our [hooks](https://portal.thirdweb.com/react) and
[UI Components](https://portal.thirdweb.com/ui-components) to work.

### Deploy to IPFS

Deploy a copy of your application to IPFS using the following command:

```bash
yarn deploy
```

## Learn More

To learn more about thirdweb and Next.js, take a look at the following resources:

- [thirdweb React Documentation](https://docs.thirdweb.com/react) - learn about our React SDK.
- [thirdweb TypeScript Documentation](https://docs.thirdweb.com/typescript) - learn about our JavaScript/TypeScript SDK.
- [thirdweb Portal](https://docs.thirdweb.com) - check our guides and development resources.
- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.

You can check out [the thirdweb GitHub organization](https://github.com/thirdweb-dev) - your feedback and contributions are welcome!

## Join our Discord!

For any questions, suggestions, join our discord at [https://discord.gg/thirdweb](https://discord.gg/thirdweb).



=== File: ../token-gating-discord-bot-api/client/next.config.js ===
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  basePath: '/token-gating-discord-bot-api',
  assetPrefix: '/token-gating-discord-bot-api/',
  images: {
    unoptimized: true,
  },
}

module.exports = nextConfig


=== File: ../token-gating-discord-bot-api/client/tsconfig.json ===
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}


=== Directory: ../token-gating-discord-bot-api/client/components ===


=== File: ../token-gating-discord-bot-api/client/components/SignIn.tsx ===
import { ConnectWallet, useAddress } from "@thirdweb-dev/react";
import { useSession, signIn, signOut } from "next-auth/react";
import React from "react";
import styles from "../styles/Home.module.css";

export default function SignIn() {
  const address = useAddress();
  const { data: session } = useSession();

  // 1. The user is signed into discord and connected to wallet.
  if (session && address) {
    return (
      <div className={styles.bigSpacerTop}>
        <a onClick={() => signOut()} className={styles.secondaryButton}>
          Sign out of Discord
        </a>
      </div>
    );
  }

  // 2. Connect Wallet
  if (!address) {
    return (
      <div className={styles.main}>
        <h2 className={styles.noGapBottom}>Connect Your Wallet</h2>
        <p>Connect your wallet to check eligibility.</p>
        <ConnectWallet accentColor="#F213A4" colorMode="dark" />
      </div>
    );
  }

  // 3. Connect with Discord (OAuth)
  if (!session) {
    return (
      <div className={`${styles.main}`}>
        <h2 className={styles.noGapBottom}>Sign In with Discord</h2>
        <p>Sign In with Discord to check your eligibility for the NFT!</p>
        <button
          onClick={() => signIn("discord")}
          className={`${styles.mainButton} ${styles.spacerTop}`}
        >
          Connect Discord
        </button>
      </div>
    );
  }

  return null;
}



=== Directory: ../token-gating-discord-bot-api/client/pages ===


=== File: ../token-gating-discord-bot-api/client/pages/_app.tsx ===
import type { AppProps } from "next/app";
import { ChainId, ThirdwebProvider } from "@thirdweb-dev/react";
import { SessionProvider } from "next-auth/react";
import "../styles/globals.css";

// This is the chainId your dApp will work on.
const activeChainId = ChainId.Mumbai;

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ThirdwebProvider desiredChainId={activeChainId}>
      <SessionProvider session={pageProps.session}>
        <Component {...pageProps} />
      </SessionProvider>
    </ThirdwebProvider>
  );
}

export default MyApp;



=== File: ../token-gating-discord-bot-api/client/pages/index.tsx ===
import { useAddress, useSDK } from "@thirdweb-dev/react";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import SignIn from "../components/SignIn";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const address = useAddress(); // Get the user's address
  const { data: session } = useSession(); // Get the user's session which contains the user's address
  const sdk = useSDK(); // Get the Thirdweb SDK

  async function requestGrantRole() {
    // First, login and sign a message
    const loginPayload = await sdk?.auth.login("http://localhost:3000"); // This will open a modal to login and sign a message
    // Then make a request to our API endpoint.
    try {
      const response = await fetch("api/grant-role", {
        method: "POST",
        body: JSON.stringify({
          loginPayload // This is the payload you got from the login step,
        }),
      });

      const data = await response.json();
      console.log('data');
      console.log(data);
      // have the alert read the console and format the message
      (function() {
        var exLog = console.log;
        console.log = function(msg) {
            // @ts-ignore
            exLog.apply(this, arguments);
            msg = JSON.stringify(msg, null, 4);
            // remove the first and last characters
            msg = msg.substring(18, msg.length - 3);
            alert(msg);
        }
    })();
    console.log(data);
      //alert("Check the console for the response!"); 
    } catch (e) {
      console.error(e);
    }
  }

  return (
    <div>
      <div className={styles.container} style={{ marginTop: 0 }}>
        <SignIn />
        {address && session && (
          <div className={styles.collectionContainer}>
            <button className={styles.mainButton} onClick={requestGrantRole}>
              Give me the role!
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;



=== Directory: ../token-gating-discord-bot-api/client/pages/api ===


=== File: ../token-gating-discord-bot-api/client/pages/api/grant-role.tsx ===
import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import type { NextApiRequest, NextApiResponse } from "next";
import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./auth/[...nextauth]";
import { ethers } from "ethers";
//import discord from "discord.js";
require("dotenv").config();
import {createUser, getUser, emptyUser} from "./users";
import { getAllTokens} from "./tokens";
import { updateRoleForToken} from "./update-roles";
import { assignMessage } from "./message";

const abi = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"GRYFFINDOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"HUFFLEPUFF","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RAVENCLAW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SLYTHERIN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_burnIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_burnAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"_mintIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_mintAmounts","type":"uint256[]"}],"name":"burnForMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}];

export default async function grantRole(
    req: NextApiRequest,
    res: NextApiResponse
) {
    // Get the login payload out of the request
    const { loginPayload } = JSON.parse(req.body);
    // Get the Next Auth session so we can use the user ID as part of the discord API request
    const session = await unstable_getServerSession(req, res, authOptions);
    if (!session) {
        res.status(401).json({ error: "Not logged in" });
        return;
    }
    const sdk = new ThirdwebSDK("mumbai");
    const provider = new ethers.providers.JsonRpcProvider(
        "https://matic-mumbai.chainstacklabs.com"
    );
    const hogwartsContract = new ethers.Contract(
        process.env.CONTRACT_ADDRESS as string,
        abi,
        provider
    ); 
    const verifiedWalletAddress = sdk.auth.verify(
        "http://localhost:3000",
        loginPayload
    ); // Verify the login payload is real and valid
    if (!verifiedWalletAddress) {// If the login payload is not valid, return an error
        res.status(401).json({ error: "Invalid login payload" });
        return;
    }
    // @ts-ignore
    const { userId } = session; 
    // temp data for testing:
    // const user_id = process.env.DISCORD_USER_ID as string;
    console.log("User ID: " + userId);

    let user = await getUser(userId);
     if (!user) {
        console.log("user does not exist in db adding new user");
        user = await createUser(userId, verifiedWalletAddress);
     // if user exists in database: then update the user
     } else { 
        console.log("User Exists Updating User in Db");
        // await updateUser(user_id, verifiedWalletAddress);
        // remove the user data from the database each time for testing
        await emptyUser(userId);
    }
    // get all the tokens from the database and put their ids in an array
    const tokensInContract = await getAllTokens();
    for (let i = 0; i < tokensInContract.length; i++) {
        const balanceOfATokenInWallet = await hogwartsContract.balanceOf(verifiedWalletAddress,tokensInContract[i]._id);
        console.log('Your Wallet Address : ' + verifiedWalletAddress + 'Token ID: ' + tokensInContract[i]._id + ' Balance: ' + balanceOfATokenInWallet.toNumber());
        // check if the user roles need to be updated
        updateRoleForToken(userId, tokensInContract[i]._id, verifiedWalletAddress, balanceOfATokenInWallet.toNumber());
        if(i===tokensInContract.length-1){
            console.log('Finished updating all tokens');
            res.status(200).json({ message: assignMessage('', '', true, true) });
        }
    }
}


=== File: ../token-gating-discord-bot-api/client/pages/api/message.tsx ===
const messages: string[] = [];
export function assignMessage (role_name: string, role_type: string, writeType: boolean, readType: boolean) {

    function roleRemoveMessage (role_name: string)  {
        return `You have been Removed from the ${role_name} Level role for Token Type ${role_type}!
        You no longer are in possession of enough tokens to hold this role! !!`;
    };
    function roleAssignMessage (role_name: string) {
        return `You have been Granted the ${role_name} Level role! Level role for Token Type ${role_type}!`;
    };
    
    if (writeType && !readType) {
        messages.push(roleAssignMessage(role_name));
    } else if (!readType && !writeType){
        messages.push(roleRemoveMessage(role_name));
    }

    if (readType) {
        return messages.join(" ");
    }
}





=== File: ../token-gating-discord-bot-api/client/pages/api/tokens.tsx ===

export async function createToken(token_id: number, token_roles: [], type: string) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                _id: token_id,
                token_roles: token_roles,
                type: type
            }
        )
    })
    const data = await response.json();
    return data;
}

export async function getToken(token_id: number) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    return data;

}
export async function updateToken(token_id: number, token_roles: [], type: string) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                token_roles: token_roles,
                type: type,
            }
        )
    })
    const data = await response.json();
    return data;
}
export async function deleteToken(token_id: number) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
export async function getAllTokens() {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}



=== File: ../token-gating-discord-bot-api/client/pages/api/update-roles.tsx ===
import {getUser, updateUser} from "./users";
import { getToken} from "./tokens";
import { assignMessage } from "./message";

export async function grantDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "PUT",
        }
    );
    const data = await response.json();
    return data;
}
export async function removeDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "DELETE",
        }
    );
    const data = await response.json();
    return data;
}
export async function hasDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "GET",
        }
    );
    const data = await response.json();
    return data;
}

export async function updateRoleForToken(user_id: string, token_id: number, walletAddress: string, walletBalance: number) {
  // get the token roles
  const token = await getToken(token_id);
  const token_type = token.type;
  const token_roles = token.token_roles; // returns an array of objects
  // get the user roles
  const user = await getUser(user_id);
  const user_roles = user.user_roles;
  // function to determine if user already has role
  function userHasRole (user_roles_arr:[], role_id: string) {
    // @ts-ignore
    const role_arr = user_roles_arr.filter((item) => { return item._id === role_id});
    return role_arr
  }
  // update the user roles
  function roleUpdate(token_id: number, role_id: string, i: number) {
    // determine if user already has role
    const hasRoleArr = userHasRole(user_roles, role_id);
    const hasRole = hasRoleArr.length > 0;
    // calculate the curr next and previous role amounts
    const currAmt = token_roles[i].required_amount;
    const nxtAmt = token_roles[i++].required_amount;
    const prvAmt = token_roles[i--].required_amount;
    const thisRoleName = token_roles[i].role_name;
    // determine if the user curr role matches the token role price
    const atTop = walletBalance >= currAmt && token_roles.length - 2 === i;
    const keepRole =
      (walletBalance >= currAmt && walletBalance < nxtAmt) ||
      (walletBalance >= currAmt && token_roles.length - 2 === i);
    const moveDown =
      walletBalance < currAmt && walletBalance >= prvAmt && i != 0;
    const moveUp = walletBalance >= nxtAmt && token_roles.length - 2 != i;
    const atBottom = i === 0;
    const zeroBalance = walletBalance === 0;
    // add post role to the user and discord
    function addRole(message: string) {
      const newToken = {
        _id: token_id,
        token_roles: [
          {
            _id: role_id,
            token_id: token_id,
            role_name: thisRoleName,
            required_amount: currAmt,
          },
        ],
        type: token_type,
      };
      const newRole = {
        _id: role_id,
        token_id: token_id,
        role_name: thisRoleName,
        required_amount: currAmt,
      };
      // if user has the role, createUser will update the user
      user.public_address = walletAddress;
      // add new token to the user
      const tokensArr = user.tokens;
      tokensArr.push(newToken);
      // add new role to the user
      const rolesArr = user.user_roles;
      rolesArr.push(newRole);
      // update the user
      updateUser(user_id, user.public_address, tokensArr, rolesArr);
      //grant the role discord role to the user
      grantDiscordRole(user_id, role_id);
      // message the user about the updates
      assignMessage(token_roles[i].role_name, token_type, true, false);
      console.log(message);
    }
    // remove the role from the user and discord
    function removeRole(message: string, token_id?: number) {
      user.public_address = walletAddress;
      // remove the role from the user
      const rolesArr = user.user_roles;
      rolesArr.splice(rolesArr.indexOf(role_id), 1);
      // remove the token from the user if balance is zero
      const tokensArr = user.tokens;
      // if token_id is passed in, remove the token from the user
      if (token_id) {
        console.log(
          "Removing Token Data from User Because Balance is Zero " + token_id
        );
        tokensArr.splice(tokensArr.indexOf(token_id), 1);
      }
      updateUser(user_id, user.public_address, tokensArr, rolesArr);
      // remove the discord role from the user
      removeDiscordRole(user_id, role_id);
      // message the user about the updates
      console.log(message);
      assignMessage(token_roles[i].role_name, token_type, false, false);
    }
    function keptRole(message: string) {
      //update user balances
      updateUser(user_id, user.public_address, user.tokens, user.user_roles);
      // assign result message
      assignMessage(token_roles[i].role_name, token_type, false, false);
      // message the user about the updates
      console.log(message);
    }

    if (atTop) {
      hasRole === true ?keptRole("Congrats "+user_id+" Kept Role"+role_id+" Reached the Maxiumum Role Level for Token Thank You!!"):addRole("Congrats "+user_id+" You've qualified for a new role : "+role_id+" Upgrading Your Role Status....");
    } else if (keepRole) {
      hasRole === true ?keptRole("Dear "+user_id+" Kept Role "+role_id+"Buy more tokens to Increase Role Level!!!!"):addRole("Congrats "+user_id+" You've qualified for a new role :"+role_id+" Upgrading Your Role Status....");
    } else if (moveUp) {
      hasRole?removeRole("Congrats "+user_id+" Previous Role :"+role_id+" Was Removed. Upgrading Your Role Status...."):console.log("Congrats "+user_id+" You're over qualified for this role : "+role_id+" Upgrading Your Role Status...."),roleUpdate(token_id,token_roles[i++]._id,i++);
    } else if (moveDown) {
      hasRole?removeRole("Dear "+user_id+" Previous Role :"+role_id+"Was Removed. Downgrading Your Role Status...."+role_id):console.log("Dear "+user_id+"You're no longer qualified for this role :"+role_id+" Downgrading Your Role Status...."),roleUpdate(token_id,token_roles[i++]._id,i--);
    } else if (atBottom) {
      hasRole?removeRole("Unfortunately "+ +user_id+" Previous Role :"+role_id+" Was Removed You're no longer qualified for this role : "+role_id+" or any other role for this token please purchase more tokens to get a role for this token"):console.log("Unfortunately "+user_id+"You're not qualified for this role"+role_id+"or any other role for this token please purchase more tokens to get a role for this token");
    } else if (zeroBalance) {
      hasRole?removeRole("Dear "+user_id+" Zero Balance: No longer own tokens removing token from db",token_id):console.log("Dear "+user_id+" Zero Balance: You dont own any tokens for this token");
    } else {
      console.log("Something went wrong");
    }
  }
  roleUpdate(token_id, token_roles[0]._id, 0);
}


=== File: ../token-gating-discord-bot-api/client/pages/api/users.tsx ===

export async function createUser(user_id: string, public_address?: string, tokens? : [], roles?: []) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                _id: user_id,
                public_address: public_address,
                tokens: tokens? tokens : [],
                user_roles: roles? roles : []
            }
        )
    })
    const data = await response.json();
    return data;
}
export async function getUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    return data;
}
export async function updateUser(user_id: string, public_address?: string, tokens? : [], user_roles?: []) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                public_address: public_address? public_address : "",
                tokens: tokens? tokens : [],
                user_roles: user_roles? user_roles : []
            }
        )
    })
    const data = await response.json();
    return data;
}

export async function deleteUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
// get all users
export async function getAllUsers() {
    const response = await fetch(`${process.env.USERS_ENDPOINT}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
// see if user has a particular role
export async function userHasRole(user_id: string, role_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    const user_roles_arr = data.user_roles;
    // @ts-ignore
    const role_arr = user_roles_arr.filter((item) => { return item._id === role_id});
    return role_arr
}
// see if user has a particular token
export async function userHasToken(user_id: string, token_id: number) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    const user_tokens_arr = data.tokens;
    // @ts-ignore
    const token_arr = user_tokens_arr.filter((item) => { return item._id === token_id});
    return token_arr
}
// empty user tokens
export async function emptyUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                tokens: [],
                user_roles: []
            }
        )
    })
    const data = await response.json();
    return data;
}




=== Directory: ../token-gating-discord-bot-api/client/pages/api/auth ===


=== File: ../token-gating-discord-bot-api/client/pages/api/auth/[...nextauth].tsx ===
import NextAuth, { NextAuthOptions } from "next-auth";
import DiscordProvider from "next-auth/providers/discord";
require("dotenv").config();

export const authOptions: NextAuthOptions = {
  // Configure one or more authentication providers
  providers: [
    DiscordProvider({
      clientId: process.env.DISCORD_CLIENT_ID as string,
      clientSecret: process.env.DISCORD_CLIENT_SECRET as string,
    }),
  ],

  // When the user signs in, get their token
  callbacks: {
    async jwt({ token, account }) {
      // Persist the user ID to the token right after signin
      if (account) {
        console.log(account);
        token.userId = account.providerAccountId;
      }
      return token;
    },
    
    async session({ session, token }) {
      // @ts-ignore
      session.userId = token.userId;
      return session;
    },
  },
};

export default NextAuth(authOptions);


=== Directory: ../token-gating-discord-bot-api/client/public ===


=== File: ../token-gating-discord-bot-api/client/public/thirdweb.svg ===
<svg width="1126" height="700" viewBox="0 0 1126 700" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.06915 58.8968C-8.14591 30.5859 12.7549 0 43.3414 0H233.233C251.075 0 266.878 10.6166 273.505 27.047L424.654 404.189C428.732 414.3 428.732 425.675 424.654 436.039L329.58 672.89C315.052 709.037 263.564 709.037 249.036 672.89L3.06915 58.8968ZM369.861 57.6329C359.665 29.5748 380.566 0 410.643 0H576.065C594.416 0 610.729 11.3749 616.846 28.3109L754.231 405.453C757.544 414.805 757.544 425.169 754.231 434.775L671.647 661.515C657.883 699.431 603.847 699.431 590.083 661.515L369.861 57.6329ZM741.233 0C710.646 0 689.746 30.5859 700.961 58.8968L946.927 672.89C961.456 709.037 1012.94 709.037 1027.47 672.89L1122.54 436.039C1126.62 425.675 1126.62 414.3 1122.54 404.189L971.396 27.047C964.769 10.6166 948.966 0 931.124 0H741.233Z" fill="url(#paint0_linear_215_66)"/>
<defs>
<linearGradient id="paint0_linear_215_66" x1="563.567" y1="-165.278" x2="1341.59" y2="881.403" gradientUnits="userSpaceOnUse">
<stop stop-color="#F213A4"/>
<stop offset="1" stop-color="#5204BF"/>
</linearGradient>
</defs>
</svg>



=== Directory: ../token-gating-discord-bot-api/client/styles ===


=== File: ../token-gating-discord-bot-api/client/styles/Home.module.css ===
.container {
  margin-top: 96px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100vw;
  padding: 0 24px;
}

.pageContainer {
  max-width: 600px;
  width: 90vw;
  display: flex;
  flex-direction: row;
  align-items: center;
  flex-direction: row;
  gap: 2%;
  padding: 1rem;
}

.secondaryButton {
  cursor: pointer;
  text-align: center;
  padding: 5px;
  color: #fff;
  font-weight: 600;
}

.mainButton {
  cursor: pointer;
  display: inline-flex;
  appearance: none;
  align-items: center;
  -webkit-box-align: center;
  justify-content: center;
  white-space: nowrap;
  vertical-align: middle;
  outline: 2px solid transparent;
  outline-offset: 2px;
  line-height: 1.2;
  font-weight: 600;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform;
  transition-duration: 200ms;
  height: 3rem;
  min-width: 3rem;
  font-size: 1rem;
  background: #e5e5ea;
  background-image: linear-gradient(to left, #cc25b3 0%, #418dff 101.52%);
  color: #fff;
  width: 180px;
  text-align: center;
  border-radius: 9999px;
  border-style: none;
}

.mainButton:hover {
  opacity: 0.8;
}

.main {
  width: 500px;
  max-width: 90vw;
  min-height: 400px;
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 16px;
  padding: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 16px;
  margin-top: 48px;
}

.collectionContainer {
  width: 1200px;
  max-width: 90vw;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 2%;
}

.divider {
  width: 50%;
  border-color: grey;
  opacity: 0.25;
}

.nftBoxGrid {
  width: 1200px;
  max-width: 95vw;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 1%;
  margin-top: 28px;
  flex-wrap: wrap;
}

.nftBox {
  border-radius: 16px;
  border: 1px solid #ccc;
  width: 19%;
  min-height: 200px;
}

/* Between 1200 and 800 */
@media only screen and (min-width: 800px) and (max-width: 1200px) {
  .nftBox {
    width: 49%;
    margin-top: 16px;
  }
}

/* beneath 800
*/
@media only screen and (max-width: 800px) {
  .nftBoxGrid {
    justify-content: center;
  }
  .nftBox {
    width: 90%;
    margin-top: 16px;
  }
}

/* Screen less than 630, then hide .center */
@media only screen and (max-width: 630px) {
  .center {
    display: none;
  }
}

.spacerTop {
  margin-top: 16px;
}

.bigSpacerTop {
  margin-top: 32px;
}

.spacerBottom {
  margin-bottom: 16px;
}

.detailPageContainer {
  max-width: 800px;
}

.detailPageHr {
  margin-top: 0px;
  margin-bottom: 32px;
}

.lightPurple {
  color: #e011a7;
}

.nftMedia {
  width: 100%;
  max-height: 300px;
  border-radius: 15px;
}

.noGapBottom {
  margin-bottom: 0px;
}



=== File: ../token-gating-discord-bot-api/client/styles/globals.css ===
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap");

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
  padding-bottom: 275px;
}

/* Inherit fonts */
input,
button,
textarea,
select {
  font: inherit;
}

:root {
  --background-color: #1c1e21;
  --white: #ffffff;
  --tw-color1: #a855f7;
  --tw-color1-hover: #9333ea;
}

body {
  background: var(--background-color);
  font-family: "Inter", sans-serif;
  color: var(--white);
  display: flex;
  margin: 0;
  text-align: center;
}

h2 {
  font-size: 2rem;
  font-weight: 600;

}



=== File: ../token-gating-discord-bot-api/client/.babelrc ===
{
    "presets": ["next/babel"],
    "plugins": []
  }


=== File: ../token-gating-discord-bot-api/client/.eslintrc.json ===
{
  "extends": [
    "next"
  ]
}



=== File: ../token-gating-discord-bot-api/client/README.md ===
## Getting Started

Create a project using this example:

```bash
npx thirdweb create --template next-typescript-starter
```

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

On `pages/_app.tsx`, you'll find our `ThirdwebProvider` wrapping your app, this is necessary for our [hooks](https://portal.thirdweb.com/react) and
[UI Components](https://portal.thirdweb.com/ui-components) to work.

### Deploy to IPFS

Deploy a copy of your application to IPFS using the following command:

```bash
yarn deploy
```

## Learn More

To learn more about thirdweb and Next.js, take a look at the following resources:

- [thirdweb React Documentation](https://docs.thirdweb.com/react) - learn about our React SDK.
- [thirdweb TypeScript Documentation](https://docs.thirdweb.com/typescript) - learn about our JavaScript/TypeScript SDK.
- [thirdweb Portal](https://docs.thirdweb.com) - check our guides and development resources.
- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.

You can check out [the thirdweb GitHub organization](https://github.com/thirdweb-dev) - your feedback and contributions are welcome!

## Join our Discord!

For any questions, suggestions, join our discord at [https://discord.gg/thirdweb](https://discord.gg/thirdweb).



=== File: ../token-gating-discord-bot-api/client/next.config.js ===
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  basePath: '/token-gating-discord-bot-api',
  assetPrefix: '/token-gating-discord-bot-api/',
  images: {
    unoptimized: true,
  },
}

module.exports = nextConfig


=== File: ../token-gating-discord-bot-api/client/tsconfig.json ===
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}


=== Directory: ../token-gating-discord-bot-api/client/components ===


=== File: ../token-gating-discord-bot-api/client/components/SignIn.tsx ===
import { ConnectWallet, useAddress } from "@thirdweb-dev/react";
import { useSession, signIn, signOut } from "next-auth/react";
import React from "react";
import styles from "../styles/Home.module.css";

export default function SignIn() {
  const address = useAddress();
  const { data: session } = useSession();

  // 1. The user is signed into discord and connected to wallet.
  if (session && address) {
    return (
      <div className={styles.bigSpacerTop}>
        <a onClick={() => signOut()} className={styles.secondaryButton}>
          Sign out of Discord
        </a>
      </div>
    );
  }

  // 2. Connect Wallet
  if (!address) {
    return (
      <div className={styles.main}>
        <h2 className={styles.noGapBottom}>Connect Your Wallet</h2>
        <p>Connect your wallet to check eligibility.</p>
        <ConnectWallet accentColor="#F213A4" colorMode="dark" />
      </div>
    );
  }

  // 3. Connect with Discord (OAuth)
  if (!session) {
    return (
      <div className={`${styles.main}`}>
        <h2 className={styles.noGapBottom}>Sign In with Discord</h2>
        <p>Sign In with Discord to check your eligibility for the NFT!</p>
        <button
          onClick={() => signIn("discord")}
          className={`${styles.mainButton} ${styles.spacerTop}`}
        >
          Connect Discord
        </button>
      </div>
    );
  }

  return null;
}



=== Directory: ../token-gating-discord-bot-api/client/pages ===


=== File: ../token-gating-discord-bot-api/client/pages/_app.tsx ===
import type { AppProps } from "next/app";
import { ChainId, ThirdwebProvider } from "@thirdweb-dev/react";
import { SessionProvider } from "next-auth/react";
import "../styles/globals.css";

// This is the chainId your dApp will work on.
const activeChainId = ChainId.Mumbai;

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ThirdwebProvider desiredChainId={activeChainId}>
      <SessionProvider session={pageProps.session}>
        <Component {...pageProps} />
      </SessionProvider>
    </ThirdwebProvider>
  );
}

export default MyApp;



=== File: ../token-gating-discord-bot-api/client/pages/index.tsx ===
import { useAddress, useSDK } from "@thirdweb-dev/react";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import SignIn from "../components/SignIn";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const address = useAddress(); // Get the user's address
  const { data: session } = useSession(); // Get the user's session which contains the user's address
  const sdk = useSDK(); // Get the Thirdweb SDK

  async function requestGrantRole() {
    // First, login and sign a message
    const loginPayload = await sdk?.auth.login("http://localhost:3000"); // This will open a modal to login and sign a message
    // Then make a request to our API endpoint.
    try {
      const response = await fetch("api/grant-role", {
        method: "POST",
        body: JSON.stringify({
          loginPayload // This is the payload you got from the login step,
        }),
      });

      const data = await response.json();
      console.log('data');
      console.log(data);
      // have the alert read the console and format the message
      (function() {
        var exLog = console.log;
        console.log = function(msg) {
            // @ts-ignore
            exLog.apply(this, arguments);
            msg = JSON.stringify(msg, null, 4);
            // remove the first and last characters
            msg = msg.substring(18, msg.length - 3);
            alert(msg);
        }
    })();
    console.log(data);
      //alert("Check the console for the response!"); 
    } catch (e) {
      console.error(e);
    }
  }

  return (
    <div>
      <div className={styles.container} style={{ marginTop: 0 }}>
        <SignIn />
        {address && session && (
          <div className={styles.collectionContainer}>
            <button className={styles.mainButton} onClick={requestGrantRole}>
              Give me the role!
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;



=== Directory: ../token-gating-discord-bot-api/client/pages/api ===


=== File: ../token-gating-discord-bot-api/client/pages/api/grant-role.tsx ===
import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import type { NextApiRequest, NextApiResponse } from "next";
import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./auth/[...nextauth]";
import { ethers } from "ethers";
//import discord from "discord.js";
require("dotenv").config();
import {createUser, getUser, emptyUser} from "./users";
import { getAllTokens} from "./tokens";
import { updateRoleForToken} from "./update-roles";
import { assignMessage } from "./message";

const abi = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"GRYFFINDOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"HUFFLEPUFF","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RAVENCLAW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SLYTHERIN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_burnIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_burnAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"_mintIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_mintAmounts","type":"uint256[]"}],"name":"burnForMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}];

export default async function grantRole(
    req: NextApiRequest,
    res: NextApiResponse
) {
    // Get the login payload out of the request
    const { loginPayload } = JSON.parse(req.body);
    // Get the Next Auth session so we can use the user ID as part of the discord API request
    const session = await unstable_getServerSession(req, res, authOptions);
    if (!session) {
        res.status(401).json({ error: "Not logged in" });
        return;
    }
    const sdk = new ThirdwebSDK("mumbai");
    const provider = new ethers.providers.JsonRpcProvider(
        "https://matic-mumbai.chainstacklabs.com"
    );
    const hogwartsContract = new ethers.Contract(
        process.env.CONTRACT_ADDRESS as string,
        abi,
        provider
    ); 
    const verifiedWalletAddress = sdk.auth.verify(
        "http://localhost:3000",
        loginPayload
    ); // Verify the login payload is real and valid
    if (!verifiedWalletAddress) {// If the login payload is not valid, return an error
        res.status(401).json({ error: "Invalid login payload" });
        return;
    }
    // @ts-ignore
    const { userId } = session; 
    // temp data for testing:
    // const user_id = process.env.DISCORD_USER_ID as string;
    console.log("User ID: " + userId);

    let user = await getUser(userId);
     if (!user) {
        console.log("user does not exist in db adding new user");
        user = await createUser(userId, verifiedWalletAddress);
     // if user exists in database: then update the user
     } else { 
        console.log("User Exists Updating User in Db");
        // await updateUser(user_id, verifiedWalletAddress);
        // remove the user data from the database each time for testing
        await emptyUser(userId);
    }
    // get all the tokens from the database and put their ids in an array
    const tokensInContract = await getAllTokens();
    for (let i = 0; i < tokensInContract.length; i++) {
        const balanceOfATokenInWallet = await hogwartsContract.balanceOf(verifiedWalletAddress,tokensInContract[i]._id);
        console.log('Your Wallet Address : ' + verifiedWalletAddress + 'Token ID: ' + tokensInContract[i]._id + ' Balance: ' + balanceOfATokenInWallet.toNumber());
        // check if the user roles need to be updated
        updateRoleForToken(userId, tokensInContract[i]._id, verifiedWalletAddress, balanceOfATokenInWallet.toNumber());
        if(i===tokensInContract.length-1){
            console.log('Finished updating all tokens');
            res.status(200).json({ message: assignMessage('', '', true, true) });
        }
    }
}


=== File: ../token-gating-discord-bot-api/client/pages/api/message.tsx ===
const messages: string[] = [];
export function assignMessage (role_name: string, role_type: string, writeType: boolean, readType: boolean) {

    function roleRemoveMessage (role_name: string)  {
        return `You have been Removed from the ${role_name} Level role for Token Type ${role_type}!
        You no longer are in possession of enough tokens to hold this role! !!`;
    };
    function roleAssignMessage (role_name: string) {
        return `You have been Granted the ${role_name} Level role! Level role for Token Type ${role_type}!`;
    };
    
    if (writeType && !readType) {
        messages.push(roleAssignMessage(role_name));
    } else if (!readType && !writeType){
        messages.push(roleRemoveMessage(role_name));
    }

    if (readType) {
        return messages.join(" ");
    }
}





=== File: ../token-gating-discord-bot-api/client/pages/api/tokens.tsx ===

export async function createToken(token_id: number, token_roles: [], type: string) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                _id: token_id,
                token_roles: token_roles,
                type: type
            }
        )
    })
    const data = await response.json();
    return data;
}

export async function getToken(token_id: number) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    return data;

}
export async function updateToken(token_id: number, token_roles: [], type: string) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                token_roles: token_roles,
                type: type,
            }
        )
    })
    const data = await response.json();
    return data;
}
export async function deleteToken(token_id: number) {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}/${token_id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
export async function getAllTokens() {
    const response = await fetch(`${process.env.TOKENS_ENDPOINT}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}



=== File: ../token-gating-discord-bot-api/client/pages/api/update-roles.tsx ===
import {getUser, updateUser} from "./users";
import { getToken} from "./tokens";
import { assignMessage } from "./message";

export async function grantDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "PUT",
        }
    );
    const data = await response.json();
    return data;
}
export async function removeDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "DELETE",
        }
    );
    const data = await response.json();
    return data;
}
export async function hasDiscordRole(user_id: string, role_id: string) {
    const response = await fetch(
        `https://discordapp.com/api/guilds/${process.env.DISCORD_GUILD_ID}/members/${user_id}/roles/${role_id}`,
        {
          headers: {
            Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}`,  // Use the bot token to authenticate the request
          },
          method: "GET",
        }
    );
    const data = await response.json();
    return data;
}

export async function updateRoleForToken(user_id: string, token_id: number, walletAddress: string, walletBalance: number) {
  // get the token roles
  const token = await getToken(token_id);
  const token_type = token.type;
  const token_roles = token.token_roles; // returns an array of objects
  // get the user roles
  const user = await getUser(user_id);
  const user_roles = user.user_roles;
  // function to determine if user already has role
  function userHasRole (user_roles_arr:[], role_id: string) {
    // @ts-ignore
    const role_arr = user_roles_arr.filter((item) => { return item._id === role_id});
    return role_arr
  }
  // update the user roles
  function roleUpdate(token_id: number, role_id: string, i: number) {
    // determine if user already has role
    const hasRoleArr = userHasRole(user_roles, role_id);
    const hasRole = hasRoleArr.length > 0;
    // calculate the curr next and previous role amounts
    const currAmt = token_roles[i].required_amount;
    const nxtAmt = token_roles[i++].required_amount;
    const prvAmt = token_roles[i--].required_amount;
    const thisRoleName = token_roles[i].role_name;
    // determine if the user curr role matches the token role price
    const atTop = walletBalance >= currAmt && token_roles.length - 2 === i;
    const keepRole =
      (walletBalance >= currAmt && walletBalance < nxtAmt) ||
      (walletBalance >= currAmt && token_roles.length - 2 === i);
    const moveDown =
      walletBalance < currAmt && walletBalance >= prvAmt && i != 0;
    const moveUp = walletBalance >= nxtAmt && token_roles.length - 2 != i;
    const atBottom = i === 0;
    const zeroBalance = walletBalance === 0;
    // add post role to the user and discord
    function addRole(message: string) {
      const newToken = {
        _id: token_id,
        token_roles: [
          {
            _id: role_id,
            token_id: token_id,
            role_name: thisRoleName,
            required_amount: currAmt,
          },
        ],
        type: token_type,
      };
      const newRole = {
        _id: role_id,
        token_id: token_id,
        role_name: thisRoleName,
        required_amount: currAmt,
      };
      // if user has the role, createUser will update the user
      user.public_address = walletAddress;
      // add new token to the user
      const tokensArr = user.tokens;
      tokensArr.push(newToken);
      // add new role to the user
      const rolesArr = user.user_roles;
      rolesArr.push(newRole);
      // update the user
      updateUser(user_id, user.public_address, tokensArr, rolesArr);
      //grant the role discord role to the user
      grantDiscordRole(user_id, role_id);
      // message the user about the updates
      assignMessage(token_roles[i].role_name, token_type, true, false);
      console.log(message);
    }
    // remove the role from the user and discord
    function removeRole(message: string, token_id?: number) {
      user.public_address = walletAddress;
      // remove the role from the user
      const rolesArr = user.user_roles;
      rolesArr.splice(rolesArr.indexOf(role_id), 1);
      // remove the token from the user if balance is zero
      const tokensArr = user.tokens;
      // if token_id is passed in, remove the token from the user
      if (token_id) {
        console.log(
          "Removing Token Data from User Because Balance is Zero " + token_id
        );
        tokensArr.splice(tokensArr.indexOf(token_id), 1);
      }
      updateUser(user_id, user.public_address, tokensArr, rolesArr);
      // remove the discord role from the user
      removeDiscordRole(user_id, role_id);
      // message the user about the updates
      console.log(message);
      assignMessage(token_roles[i].role_name, token_type, false, false);
    }
    function keptRole(message: string) {
      //update user balances
      updateUser(user_id, user.public_address, user.tokens, user.user_roles);
      // assign result message
      assignMessage(token_roles[i].role_name, token_type, false, false);
      // message the user about the updates
      console.log(message);
    }

    if (atTop) {
      hasRole === true ?keptRole("Congrats "+user_id+" Kept Role"+role_id+" Reached the Maxiumum Role Level for Token Thank You!!"):addRole("Congrats "+user_id+" You've qualified for a new role : "+role_id+" Upgrading Your Role Status....");
    } else if (keepRole) {
      hasRole === true ?keptRole("Dear "+user_id+" Kept Role "+role_id+"Buy more tokens to Increase Role Level!!!!"):addRole("Congrats "+user_id+" You've qualified for a new role :"+role_id+" Upgrading Your Role Status....");
    } else if (moveUp) {
      hasRole?removeRole("Congrats "+user_id+" Previous Role :"+role_id+" Was Removed. Upgrading Your Role Status...."):console.log("Congrats "+user_id+" You're over qualified for this role : "+role_id+" Upgrading Your Role Status...."),roleUpdate(token_id,token_roles[i++]._id,i++);
    } else if (moveDown) {
      hasRole?removeRole("Dear "+user_id+" Previous Role :"+role_id+"Was Removed. Downgrading Your Role Status...."+role_id):console.log("Dear "+user_id+"You're no longer qualified for this role :"+role_id+" Downgrading Your Role Status...."),roleUpdate(token_id,token_roles[i++]._id,i--);
    } else if (atBottom) {
      hasRole?removeRole("Unfortunately "+ +user_id+" Previous Role :"+role_id+" Was Removed You're no longer qualified for this role : "+role_id+" or any other role for this token please purchase more tokens to get a role for this token"):console.log("Unfortunately "+user_id+"You're not qualified for this role"+role_id+"or any other role for this token please purchase more tokens to get a role for this token");
    } else if (zeroBalance) {
      hasRole?removeRole("Dear "+user_id+" Zero Balance: No longer own tokens removing token from db",token_id):console.log("Dear "+user_id+" Zero Balance: You dont own any tokens for this token");
    } else {
      console.log("Something went wrong");
    }
  }
  roleUpdate(token_id, token_roles[0]._id, 0);
}


=== File: ../token-gating-discord-bot-api/client/pages/api/users.tsx ===

export async function createUser(user_id: string, public_address?: string, tokens? : [], roles?: []) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                _id: user_id,
                public_address: public_address,
                tokens: tokens? tokens : [],
                user_roles: roles? roles : []
            }
        )
    })
    const data = await response.json();
    return data;
}
export async function getUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    return data;
}
export async function updateUser(user_id: string, public_address?: string, tokens? : [], user_roles?: []) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                public_address: public_address? public_address : "",
                tokens: tokens? tokens : [],
                user_roles: user_roles? user_roles : []
            }
        )
    })
    const data = await response.json();
    return data;
}

export async function deleteUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
// get all users
export async function getAllUsers() {
    const response = await fetch(`${process.env.USERS_ENDPOINT}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    })
    const data = await response.json();
    return data;
}
// see if user has a particular role
export async function userHasRole(user_id: string, role_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    const user_roles_arr = data.user_roles;
    // @ts-ignore
    const role_arr = user_roles_arr.filter((item) => { return item._id === role_id});
    return role_arr
}
// see if user has a particular token
export async function userHasToken(user_id: string, token_id: number) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`,{
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    });
    const data = await response.json();
    const user_tokens_arr = data.tokens;
    // @ts-ignore
    const token_arr = user_tokens_arr.filter((item) => { return item._id === token_id});
    return token_arr
}
// empty user tokens
export async function emptyUser(user_id: string) {
    const response = await fetch(`${process.env.USERS_ENDPOINT}/${user_id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(
            {   
                tokens: [],
                user_roles: []
            }
        )
    })
    const data = await response.json();
    return data;
}




=== Directory: ../token-gating-discord-bot-api/client/pages/api/auth ===


=== File: ../token-gating-discord-bot-api/client/pages/api/auth/[...nextauth].tsx ===
import NextAuth, { NextAuthOptions } from "next-auth";
import DiscordProvider from "next-auth/providers/discord";
require("dotenv").config();

export const authOptions: NextAuthOptions = {
  // Configure one or more authentication providers
  providers: [
    DiscordProvider({
      clientId: process.env.DISCORD_CLIENT_ID as string,
      clientSecret: process.env.DISCORD_CLIENT_SECRET as string,
    }),
  ],

  // When the user signs in, get their token
  callbacks: {
    async jwt({ token, account }) {
      // Persist the user ID to the token right after signin
      if (account) {
        console.log(account);
        token.userId = account.providerAccountId;
      }
      return token;
    },
    
    async session({ session, token }) {
      // @ts-ignore
      session.userId = token.userId;
      return session;
    },
  },
};

export default NextAuth(authOptions);


=== Directory: ../token-gating-discord-bot-api/client/public ===


=== File: ../token-gating-discord-bot-api/client/public/thirdweb.svg ===
<svg width="1126" height="700" viewBox="0 0 1126 700" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.06915 58.8968C-8.14591 30.5859 12.7549 0 43.3414 0H233.233C251.075 0 266.878 10.6166 273.505 27.047L424.654 404.189C428.732 414.3 428.732 425.675 424.654 436.039L329.58 672.89C315.052 709.037 263.564 709.037 249.036 672.89L3.06915 58.8968ZM369.861 57.6329C359.665 29.5748 380.566 0 410.643 0H576.065C594.416 0 610.729 11.3749 616.846 28.3109L754.231 405.453C757.544 414.805 757.544 425.169 754.231 434.775L671.647 661.515C657.883 699.431 603.847 699.431 590.083 661.515L369.861 57.6329ZM741.233 0C710.646 0 689.746 30.5859 700.961 58.8968L946.927 672.89C961.456 709.037 1012.94 709.037 1027.47 672.89L1122.54 436.039C1126.62 425.675 1126.62 414.3 1122.54 404.189L971.396 27.047C964.769 10.6166 948.966 0 931.124 0H741.233Z" fill="url(#paint0_linear_215_66)"/>
<defs>
<linearGradient id="paint0_linear_215_66" x1="563.567" y1="-165.278" x2="1341.59" y2="881.403" gradientUnits="userSpaceOnUse">
<stop stop-color="#F213A4"/>
<stop offset="1" stop-color="#5204BF"/>
</linearGradient>
</defs>
</svg>



=== Directory: ../token-gating-discord-bot-api/client/styles ===


=== File: ../token-gating-discord-bot-api/client/styles/Home.module.css ===
.container {
  margin-top: 96px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100vw;
  padding: 0 24px;
}

.pageContainer {
  max-width: 600px;
  width: 90vw;
  display: flex;
  flex-direction: row;
  align-items: center;
  flex-direction: row;
  gap: 2%;
  padding: 1rem;
}

.secondaryButton {
  cursor: pointer;
  text-align: center;
  padding: 5px;
  color: #fff;
  font-weight: 600;
}

.mainButton {
  cursor: pointer;
  display: inline-flex;
  appearance: none;
  align-items: center;
  -webkit-box-align: center;
  justify-content: center;
  white-space: nowrap;
  vertical-align: middle;
  outline: 2px solid transparent;
  outline-offset: 2px;
  line-height: 1.2;
  font-weight: 600;
  transition-property: background-color, border-color, color, fill, stroke,
    opacity, box-shadow, transform;
  transition-duration: 200ms;
  height: 3rem;
  min-width: 3rem;
  font-size: 1rem;
  background: #e5e5ea;
  background-image: linear-gradient(to left, #cc25b3 0%, #418dff 101.52%);
  color: #fff;
  width: 180px;
  text-align: center;
  border-radius: 9999px;
  border-style: none;
}

.mainButton:hover {
  opacity: 0.8;
}

.main {
  width: 500px;
  max-width: 90vw;
  min-height: 400px;
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 16px;
  padding: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 16px;
  margin-top: 48px;
}

.collectionContainer {
  width: 1200px;
  max-width: 90vw;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 2%;
}

.divider {
  width: 50%;
  border-color: grey;
  opacity: 0.25;
}

.nftBoxGrid {
  width: 1200px;
  max-width: 95vw;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 1%;
  margin-top: 28px;
  flex-wrap: wrap;
}

.nftBox {
  border-radius: 16px;
  border: 1px solid #ccc;
  width: 19%;
  min-height: 200px;
}

/* Between 1200 and 800 */
@media only screen and (min-width: 800px) and (max-width: 1200px) {
  .nftBox {
    width: 49%;
    margin-top: 16px;
  }
}

/* beneath 800
*/
@media only screen and (max-width: 800px) {
  .nftBoxGrid {
    justify-content: center;
  }
  .nftBox {
    width: 90%;
    margin-top: 16px;
  }
}

/* Screen less than 630, then hide .center */
@media only screen and (max-width: 630px) {
  .center {
    display: none;
  }
}

.spacerTop {
  margin-top: 16px;
}

.bigSpacerTop {
  margin-top: 32px;
}

.spacerBottom {
  margin-bottom: 16px;
}

.detailPageContainer {
  max-width: 800px;
}

.detailPageHr {
  margin-top: 0px;
  margin-bottom: 32px;
}

.lightPurple {
  color: #e011a7;
}

.nftMedia {
  width: 100%;
  max-height: 300px;
  border-radius: 15px;
}

.noGapBottom {
  margin-bottom: 0px;
}



=== File: ../token-gating-discord-bot-api/client/styles/globals.css ===
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap");

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
  padding-bottom: 275px;
}

/* Inherit fonts */
input,
button,
textarea,
select {
  font: inherit;
}

:root {
  --background-color: #1c1e21;
  --white: #ffffff;
  --tw-color1: #a855f7;
  --tw-color1-hover: #9333ea;
}

body {
  background: var(--background-color);
  font-family: "Inter", sans-serif;
  color: var(--white);
  display: flex;
  margin: 0;
  text-align: center;
}

h2 {
  font-size: 2rem;
  font-weight: 600;

}



=================================
       ADDITIONAL NOTES
=================================
- Generated using repository-content-printer
- Node modules and build outputs excluded
- See config.mjs for complete ignore list
